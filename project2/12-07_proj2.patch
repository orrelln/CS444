From be433e6a49f1849f7d3638518a5b383abcd681a7 Mon Sep 17 00:00:00 2001
From: Aileen Thai <dapper.whale@gmail.com>
Date: Mon, 8 May 2017 21:26:42 -0700
Subject: [PATCH] Prepping for patch

---
 block/Kconfig.iosched |  12 +++
 block/Makefile        |   1 +
 block/sstf-iosched.c  | 234 ++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 247 insertions(+)
 create mode 100755 block/sstf-iosched.c

diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..c16a0a8 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -2,6 +2,14 @@ if BLOCK
 
 menu "IO Schedulers"
 
+
+config IOSCHED_SSTF
+	bool
+	default y
+	---help---
+      The sstf I/O scheduler was written for Project 2: I/O Elevators, CS 444
+      Spring 2017.
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -55,6 +63,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_SSTF
+		bool "sstf"
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +73,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 20645e8..4b323fe 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100755
index 0000000..fd2c92a
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,234 @@
+/*
+ * elevator sstf
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+        struct list_head queue;
+
+        sector_t head;
+};
+
+void print_list(struct request_queue *q)
+{
+        struct sstf_data *nd = q->elevator->elevator_data;
+        struct list_head *cursor;
+        
+        printk(KERN_NOTICE "List State: ");
+        
+        list_for_each(cursor, &nd->queue) {
+                struct request *req = list_entry(cursor, struct request, queuelist);
+                printk("Item: %llu, ", blk_rq_pos(req));
+        }
+        printk("\n");
+}
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+                struct request *rq;
+                struct list_head *cursor;
+                int end = 1;
+
+                printk(KERN_NOTICE "BEFORE DISPATCH\n");
+                printk(KERN_NOTICE "HEAD: %llu\n", nd->head);
+                print_list(q);
+
+                list_for_each(cursor, &nd->queue) {
+                        rq = list_entry(cursor, struct request, queuelist);
+                        if (blk_rq_pos(rq) > nd->head) {
+                                end = 0;
+                                break;
+                        }
+                }
+                if (end == 1) {
+                        rq = list_entry(nd->queue.next, struct request, queuelist);
+                }
+
+                list_del_init(&rq->queuelist);
+                nd->head = blk_rq_pos(rq) + blk_rq_sectors(rq);
+
+                printk(KERN_NOTICE "Dispatching rq: %llu\n", blk_rq_pos(rq));
+                elv_dispatch_sort(q, rq);
+                printk(KERN_NOTICE "AFTER DISPATCH\n");
+                print_list(q);
+                printk("\n");
+                
+                return 1;
+        }
+	return 0;
+}
+
+// Add req to queue
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+        struct sstf_data *nd = q->elevator->elevator_data;
+        printk(KERN_NOTICE "BEFORE ADD\n");
+        print_list(q);
+
+        printk(KERN_NOTICE "Adding rq: %llu\n", blk_rq_pos(rq));
+        // list is empty so just add to tail
+        if (list_empty(&nd->queue)) {
+                list_add(&rq->queuelist, &nd->queue);
+        } else { // list isnt empty so we need to search where to place
+                struct request *next, *prev;
+                struct list_head *cursor;
+                int end = 1;
+
+                 /*assign next and prev*/
+                /*next = list_entry(nd->queue.next, struct request, queuelist);*/
+                /*prev = next;*/
+                
+
+
+                printk(KERN_NOTICE "BEFORE DISPATCH\n");
+                printk(KERN_NOTICE "HEAD: %llu\n", nd->head);
+                print_list(q);
+
+                next = list_entry(nd->queue.next, struct request, queuelist);
+                list_for_each(cursor, &nd->queue) {
+                        prev = next;
+                        next = list_entry(cursor, struct request, queuelist);
+                        if (blk_rq_pos(next) > blk_rq_pos(rq)) {
+                                end = 0;
+                                break;
+                        }
+                }
+                if (end == 1) {
+                        prev = next;
+                }
+
+
+
+
+                /*printk(KERN_NOTICE "iterating request list...");*/
+                 /*compare sector of rq to our next element until we get where we should insert*/
+                /*while (blk_rq_pos(rq) > blk_rq_pos(next)) {*/
+                        /*printk(KERN_NOTICE "list rq: %llu\n", blk_rq_pos(next));*/
+                        /*prev = next;*/
+                        /*next = list_entry(next->queuelist.next, struct request, queuelist);*/
+                        
+                         /*prev > next so we looped to circular */
+                        /*if (blk_rq_pos(prev) >= blk_rq_pos(next)) {*/
+                                /*break;*/
+                        /*}*/
+                /*}*/
+
+                /*printk(KERN_NOTICE "Adding request rq: %llu, after prev: %llu\n", */
+                                /*blk_rq_pos(rq),*/
+                                /*blk_rq_pos(prev));*/
+
+                // Adds after prev and automatically finishes
+                list_add(&rq->queuelist, &prev->queuelist);
+                printk(KERN_NOTICE "AFTER ADD\n");
+                print_list(q);
+                printk("\n");
+        }
+}
+
+// Get former
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+    // get prev req, one direction so no need?
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+// Get latter
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+    // where we need to turn around for the CLook elevator
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+// Create Queue
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+        nd->head = 0;
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+// Quit Queue
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+// Elevator type
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+// init ??
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+// iniit ?
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Michael, Nick, Thai");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("sstf IO scheduler");
-- 
1.7.12.4

